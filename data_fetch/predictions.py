# -*- coding: utf-8 -*-
"""predictions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-m9EwhieGHjUFDYI6CLB5ZlXr-FS9vRL
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import requests
from datetime import datetime

from google.colab import userdata
userdata.get('weather_api')

location_data = requests.get("https://ipinfo.io").json()
print(location_data)

city = location_data['city']
lat, lon = location_data['loc'].split(',')

api_key = userdata.get('weather_api')

# OpenWeather 5-day / 3-hour forecast
url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&units=imperial&appid={api_key}"
response = requests.get(url)
forecast_data = response.json()

# Extract forecast list
forecast_list = forecast_data['list']

# Parse data into a DataFrame
data = []
for entry in forecast_list:
    dt = datetime.fromtimestamp(entry['dt'])
    temp = entry['main']['temp']
    humidity = entry['main']['humidity']
    clouds = entry['clouds']['all']  # cloud coverage as proxy for sunlight
    data.append([dt.date(), temp, humidity, clouds])

df = pd.DataFrame(data, columns=['date', 'temp', 'humidity', 'clouds'])

# Group by day and calculate averages
daily_avg = df.groupby('date').mean(numeric_only=True).reset_index()
print("Daily Averages (Next 5 Days):")
print(daily_avg)

# Optional: get overall 6-day average
overall_avg = daily_avg.mean(numeric_only=True)
sunlight_hrs = 30 * 0.01 * overall_avg['clouds']

print("\n5-Day Averages:")
print(f"Temp: {overall_avg['temp']:.2f}Â°C")
print(f"Humidity: {overall_avg['humidity']:.2f}%")
print(f"Cloudiness (sunlight proxy): {overall_avg['clouds']:.2f}%")
print(f"Hours of sunlight: {sunlight_hrs:.2f}") # roughly 30 hours of good sunlight in 6 days

# get the average of the below from the api, then add in the user inputted data in watering per week and soil type to compute

input_data = {
    'avg_temp': overall_avg['temp'],
    'humidity': overall_avg['humidity'],
    'sunlight_hrs': sunlight_hrs,
    'watering_frequency': 2, #this is based on user input
}

# example machine learning dataset

data = {
    'avg_temp': [75, 60, 90, 85, 70, 55, 88, 62, 65, 82],
    'humidity': [30, 60, 25, 20, 50, 70, 40, 65, 45, 55],
    'sunlight_hrs': [10, 5, 12, 11, 7, 4, 9, 6, 8, 10],
    'watering_frequency': [2, 3, 1, 1, 3, 3, 2, 3, 2, 1],
    'plant_ok': [0, 1, 0, 0, 1, 1, 1, 1, 1, 0]  # 1 = Yes, 0 = No
}

df = pd.DataFrame(data)

# Split into features and labels
X = df.drop('plant_ok', axis=1)
y = df['plant_ok']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Random Forest
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Classification Report:\n")
print(classification_report(y_test, y_pred))

# Example new plant care input
new_input = pd.DataFrame([{
    'avg_temp': input_data['avg_temp'],
    'humidity': input_data['humidity'],
    'sunlight_hrs': input_data['sunlight_hrs'],
    'watering_frequency': input_data['watering_frequency']
}])

prediction = model.predict(new_input)
print("Prediction for new plant:", "Doing well" if prediction[0] == 1 else "Plant dying")

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('cleaned_plants.csv')
df.head()

def light_need(brightness):
  # brightness indicates the brightness of the plant in the csv row
  sunlight_need = -2 * brightness + 8
  actual_sunlight = input_data['sunlight_hours'] * (1/6)
  hours = sunlight_need - actual_sunlight
  if hours < 0:
    print("your plant got too much light in their life")
    return 0
  elif hours == 0:
    print("wow you perfect")
  else:
    print(f"your plant need {hours} more sunlight tomorrow")
    return hours

