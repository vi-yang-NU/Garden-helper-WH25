# -*- coding: utf-8 -*-
"""mlmodel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L8I4mA6ABdyej_AQhDyJgpryD_ACu3ii
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import joblib

# 2. Generate realistic, noisy dataset
def generate_noisy_dataset(n_samples=10000):
    np.random.seed(42)

    avg_temp = np.random.uniform(40, 100, n_samples)
    humidity = np.random.uniform(10, 90, n_samples)
    sunlight_hrs = np.random.uniform(0, 15, n_samples)
    watering_frequency = np.random.randint(1, 8, n_samples)

    plant_ok = []

    for temp, hum, sun, water in zip(avg_temp, humidity, sunlight_hrs, watering_frequency):
        prob_healthy = 0.8

        if temp > 90 and water <= 2:
            prob_healthy -= 0.5
        if hum < 20 and sun > 10:
            prob_healthy -= 0.3
        if sun < 2 and water > 5:
            prob_healthy -= 0.3
        if 65 < temp < 85 and 40 < hum < 70 and 5 < sun < 12:
            prob_healthy += 0.2

        prob_healthy = min(max(prob_healthy, 0), 1)

        label = 1 if np.random.rand() < prob_healthy else 0
        plant_ok.append(label)

    avg_temp += np.random.normal(0, 2, n_samples)
    humidity += np.random.normal(0, 5, n_samples)
    sunlight_hrs += np.random.normal(0, 1, n_samples)

    avg_temp = np.clip(avg_temp, 30, 110)
    humidity = np.clip(humidity, 0, 100)
    sunlight_hrs = np.clip(sunlight_hrs, 0, 15)

    df = pd.DataFrame({
        'avg_temp': avg_temp,
        'humidity': humidity,
        'sunlight_hrs': sunlight_hrs,
        'watering_frequency': watering_frequency,
        'plant_ok': plant_ok
    })

    # Add 2% label noise
    noise_indices = np.random.choice(df.index, size=int(0.02 * n_samples), replace=False)
    df.loc[noise_indices, 'plant_ok'] = 1 - df.loc[noise_indices, 'plant_ok']

    return df

# 3. Generate dataset
df = generate_noisy_dataset(10000)

# 4. Split data
X = df.drop('plant_ok', axis=1)
y = df['plant_ok']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 5. Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# 6. Evaluate
y_pred = model.predict(X_test)
print("Classification Report:\n")
print(classification_report(y_test, y_pred))

# 7. Save model
joblib.dump(model, 'plant_health_model.joblib')
print("Model saved to 'plant_health_model.joblib'.")

# 8. Example prediction
# (Replace with your actual input later)
sample_input = pd.DataFrame([{
    'avg_temp': 85,
    'humidity': 35,
    'sunlight_hrs': 11,
    'watering_frequency': 2
}])

loaded_model = joblib.load('plant_health_model.joblib')
prediction = loaded_model.predict(sample_input)
print("Prediction for input:", "Plant is doing well" if prediction[0] == 1 else "Plant is dying")

